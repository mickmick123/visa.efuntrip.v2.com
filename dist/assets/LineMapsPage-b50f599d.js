import{g as xe,n as T,d as J,s as W,e as ke,f as S,h as M,r as x,i as Me,j as Te,k as se,l as V,G as I,P as Be,o as re,q as ge,t as Ae,T as pe,u as K,R as je,A as Ne,M as Ve,Z as ze,a as Oe,m as Re,c as C,b as Ge,B as Ie,p as z,C as Ee,L as ue,v as Ue,w as Fe}from"./AnimatedTheme-4097d146.js";import{h as he,a2 as Ye,d as me,r as O,J as D,c as ce,a7 as Ze,K as $e,L as He,m as Ke,M as Xe,o as fe,i as ye,_ as qe,a as Je,f as de,w as We}from"./index-6280b85b.js";import"./_commonjsHelpers-de833af9.js";var Q,ee,R,G,B={sphere:T,point:T,lineStart:Qe,lineEnd:T,polygonStart:T,polygonEnd:T};function Qe(){B.point=tt,B.lineEnd=et}function et(){B.point=B.lineEnd=T}function tt(o,e){o*=x,e*=x,ee=o,R=S(e),G=M(e),B.point=it}function it(o,e){o*=x,e*=x;var t=S(e),i=M(e),l=Me(o-ee),n=M(l),u=S(l),s=i*u,r=G*t-R*i*n,h=R*t+G*i*n;Q.add(J(W(s*s+r*r),h)),ee=o,R=t,G=i}function ve(o){return Q=new ke,xe(o,B),+Q}var te=[null,null],nt={type:"LineString",coordinates:te};function ot(o,e){return te[0]=o,te[1]=e,ve(nt)}function at(o,e){var t=o[0]*x,i=o[1]*x,l=e[0]*x,n=e[1]*x,u=M(i),s=S(i),r=M(n),h=S(n),m=u*M(t),v=u*S(t),_=r*M(l),f=r*S(l),y=2*Te(W(se(n-i)+u*r*se(l-t))),L=S(y),d=y?function(c){var g=S(c*=y)/L,P=S(y-c)/L,w=P*m+g*_,k=P*v+g*f,A=P*s+g*h;return[J(k,w)*V,J(A,W(w*w+k*k))*V]}:function(){return[t*V,i*V]};return d.distance=y,d}class E extends I{constructor(){super(...arguments),Object.defineProperty(this,"_projectionDirty",{enumerable:!0,configurable:!0,writable:!0,value:!1})}_beforeChanged(){if(super._beforeChanged(),this._projectionDirty||this.isDirty("geometry")||this.isDirty("precision")){const e=this.get("geometry");if(e){const i=this.getPrivate("series");if(i){const l=i.chart;if(l){const n=l.get("projection");let u=null;n&&n.clipAngle&&(u=n.clipAngle(),n.precision(this.get("precision",.5)));const s=this.dataItem,r=l.getPrivate("geoPath");if(r&&s)if(this._clear=!0,s.get("lineType",i.get("lineType"))=="straight"){const h=this.get("geometry");if(h){let m=h.coordinates;if(m){let v;h.type=="LineString"?v=[m]:h.type=="MultiLineString"&&(v=m),this.set("draw",_=>{for(let f=0;f<v.length;f++){let y=v[f];if(y.length>0){const L=y[0],d=l.convert({longitude:L[0],latitude:L[1]});_.lineTo(d.x,d.y);for(let c=0;c<y.length;c++){const g=y[c],P=l.convert({longitude:g[0],latitude:g[1]});_.lineTo(P.x,P.y)}}}})}}}else this.set("draw",h=>{n&&i.get("clipBack")===!1&&n.clipAngle(180),r.context(this._display),r(e),r.context(null),n&&n.clipAngle&&n.clipAngle(u)})}}}const t="linechanged";this.events.isEnabled(t)&&this.events.dispatch(t,{type:t,target:this})}}markDirtyProjection(){this.markDirty(),this._projectionDirty=!0}_clearDirty(){super._clearDirty(),this._projectionDirty=!1}_getTooltipPoint(){let e=this.get("tooltipX"),t=this.get("tooltipY"),i=0,l=0;if(re(e)&&(i=e),re(t)&&(l=t),e instanceof Be){const n=this.positionToGeoPoint(e.value),u=this.getPrivate("series");if(u){const s=u.chart;if(s){const r=s.convert(n);i=r.x,l=r.y}}}return{x:i,y:l}}positionToGeoPoint(e){const t=this.get("geometry"),i=this.getPrivate("series"),l=i.chart,n=this.dataItem;if(t&&i&&l&&n){const u=n.get("lineType",i.get("lineType"));let s=ve(t),r=0,h,m=0,v=0,_,f,y=t.coordinates;if(y){let L;t.type=="LineString"?L=[y]:t.type=="MultiLineString"&&(L=y);for(let d=0;d<L.length;d++){let c=L[d];if(c.length>1){for(let g=1;g<c.length;g++)if(_=c[g-1],f=c[g],m=r/s,h=ot(_,f),r+=h,v=r/s,m<=e&&v>e){d=L.length;break}}else c.length==1&&(_=c[0],f=c[0],m=0,v=1)}if(_&&f){let d=(e-m)/(v-m),c;if(u=="straight"){let g=l.convert({longitude:_[0],latitude:_[1]}),P=l.convert({longitude:f[0],latitude:f[1]}),w=g.x+(P.x-g.x)*d,k=g.y+(P.y-g.y)*d;return l.invert({x:w,y:k})}else return c=at(_,f)(d),{longitude:c[0],latitude:c[1]}}}}return{longitude:0,latitude:0}}}Object.defineProperty(E,"className",{enumerable:!0,configurable:!0,writable:!0,value:"MapLine"});Object.defineProperty(E,"classNames",{enumerable:!0,configurable:!0,writable:!0,value:I.classNames.concat([E.className])});class U extends ge{constructor(){super(...arguments),Object.defineProperty(this,"mapLines",{enumerable:!0,configurable:!0,writable:!0,value:new Ae(pe.new({}),()=>E._new(this._root,{},[this.mapLines.template]))}),Object.defineProperty(this,"_types",{enumerable:!0,configurable:!0,writable:!0,value:["LineString","MultiLineString"]})}_afterNew(){this.fields.push("lineType"),this._setRawDefault("lineTypeField","lineType"),super._afterNew()}makeMapLine(e){const t=this.children.push(this.mapLines.make());return t._setDataItem(e),this.mapLines.push(t),t}markDirtyProjection(){K(this.dataItems,e=>{let t=e.get("mapLine");t&&t.markDirtyProjection()})}_prepareChildren(){super._prepareChildren(),this.isDirty("stroke")&&this.mapLines.template.set("stroke",this.get("stroke"))}processDataItem(e){super.processDataItem(e);let t=e.get("mapLine");t||(t=this.makeMapLine(e)),this._handlePointsToConnect(e),e.on("pointsToConnect",()=>{this._handlePointsToConnect(e)}),e.set("mapLine",t),this._addGeometry(e.get("geometry"),this),t.setPrivate("series",this)}_handlePointsToConnect(e){const t=e.get("pointsToConnect");t&&(K(t,i=>{i.on("geometry",()=>{this.markDirtyValues(e)}),i.on("longitude",()=>{this.markDirtyValues(e)}),i.on("latitude",()=>{this.markDirtyValues(e)})}),this.markDirtyValues(e))}markDirtyValues(e){if(super.markDirtyValues(),e){const t=e.get("mapLine");if(t){const i=e.get("pointsToConnect");if(i){let l=[];K(i,u=>{const s=u.get("longitude"),r=u.get("latitude");if(s!=null&&r!=null)l.push([s,r]);else{const h=u.get("geometry");if(h){const m=h.coordinates;m&&l.push([m[0],m[1]])}}});let n={type:"LineString",coordinates:l};e.setRaw("geometry",n),t.set("geometry",n)}else t.set("geometry",e.get("geometry"))}}}disposeDataItem(e){super.disposeDataItem(e);const t=e.get("mapLine");t&&(this.mapLines.removeValue(t),t.dispose())}_excludeDataItem(e){super._excludeDataItem(e);const t=e.get("mapLine");t&&t.setPrivate("visible",!1)}_unexcludeDataItem(e){super._unexcludeDataItem(e);const t=e.get("mapLine");t&&t.setPrivate("visible",!0)}_notIncludeDataItem(e){super._notIncludeDataItem(e);const t=e.get("mapLine");t&&t.setPrivate("visible",!1)}_unNotIncludeDataItem(e){super._unNotIncludeDataItem(e);const t=e.get("mapLine");t&&t.setPrivate("visible",!0)}}Object.defineProperty(U,"className",{enumerable:!0,configurable:!0,writable:!0,value:"MapLineSeries"});Object.defineProperty(U,"classNames",{enumerable:!0,configurable:!0,writable:!0,value:ge.classNames.concat([U.className])});const p="M9,0C4.029,0,0,4.029,0,9s4.029,9,9,9s9-4.029,9-9S13.971,0,9,0z M9,15.93 c-3.83,0-6.93-3.1-6.93-6.93S5.17,2.07,9,2.07s6.93,3.1,6.93,6.93S12.83,15.93,9,15.93 M12.5,9c0,1.933-1.567,3.5-3.5,3.5S5.5,10.933,5.5,9S7.067,5.5,9,5.5 S12.5,7.067,12.5,9z",lt="M19.671,8.11l-2.777,2.777l-3.837-0.861c0.362-0.505,0.916-1.683,0.464-2.135c-0.518-0.517-1.979,0.278-2.305,0.604l-0.913,0.913L7.614,8.804l-2.021,2.021l2.232,1.061l-0.082,0.082l1.701,1.701l0.688-0.687l3.164,1.504L9.571,18.21H6.413l-1.137,1.138l3.6,0.948l1.83,1.83l0.947,3.598l1.137-1.137V21.43l3.725-3.725l1.504,3.164l-0.687,0.687l1.702,1.701l0.081-0.081l1.062,2.231l2.02-2.02l-0.604-2.689l0.912-0.912c0.326-0.326,1.121-1.789,0.604-2.306c-0.452-0.452-1.63,0.101-2.135,0.464l-0.861-3.838l2.777-2.777c0.947-0.947,3.599-4.862,2.62-5.839C24.533,4.512,20.618,7.163,19.671,8.11z",ie={id:"london",color:"info",svgPath:p,title:"London",country:"United Kingdom",latitude:51.5002,longitude:-.1262,flights:[{latitude:50.4422,longitude:30.5367},{latitude:46.948,longitude:7.4481},{latitude:59.3328,longitude:18.0645},{latitude:40.4167,longitude:-3.7033},{latitude:46.0514,longitude:14.506},{latitude:48.2116,longitude:17.1547},{latitude:44.8048,longitude:20.4781},{latitude:55.7558,longitude:37.6176},{latitude:38.7072,longitude:-9.1355},{latitude:54.6896,longitude:25.2799},{latitude:64.1353,longitude:-21.8952},{latitude:40.43,longitude:-74}]},st={id:"vilnius",color:"info",svgPath:p,title:"Vilnius",country:"Lithuania",latitude:54.6896,longitude:25.2799,flights:[{latitude:50.8371,longitude:4.3676},{latitude:59.9138,longitude:10.7387},{latitude:40.4167,longitude:-3.7033},{latitude:50.0878,longitude:14.4205},{latitude:48.2116,longitude:17.1547},{latitude:44.8048,longitude:20.4781},{latitude:55.7558,longitude:37.6176},{latitude:37.9792,longitude:23.7166},{latitude:51.5002,longitude:-.1262},{latitude:53.3441,longitude:-6.2675}]},rt=[ie,st,{svgPath:p,color:"info",title:"Brussels",country:"Belgium",latitude:50.8371,longitude:4.3676},{svgPath:p,color:"info",title:"Prague",country:"Czech Republic",latitude:50.0878,longitude:14.4205},{svgPath:p,color:"info",title:"Athens",country:"Greece",latitude:37.9792,longitude:23.7166},{svgPath:p,color:"info",title:"Reykjavik",country:"Iceland",latitude:64.1353,longitude:-21.8952},{svgPath:p,color:"info",title:"Dublin",country:"Ireland",latitude:53.3441,longitude:-6.2675},{svgPath:p,color:"info",title:"Oslo",country:"Norway",latitude:59.9138,longitude:10.7387},{svgPath:p,color:"info",title:"Lisbon",country:"Portugal",latitude:38.7072,longitude:-9.1355},{svgPath:p,color:"info",title:"Moscow",country:"Russia",latitude:55.7558,longitude:37.6176},{svgPath:p,color:"info",title:"Belgrade",country:"Serbia",latitude:44.8048,longitude:20.4781},{svgPath:p,color:"info",title:"Bratislava",country:"Slovakia",latitude:48.2116,longitude:17.1547},{svgPath:p,color:"info",title:"Ljubljana",country:"Slovenia",latitude:46.0514,longitude:14.506},{svgPath:p,color:"info",title:"Madrid",country:"Spain",latitude:40.4167,longitude:-3.7033},{svgPath:p,color:"info",title:"Stockholm",country:"Sweden",latitude:59.3328,longitude:18.0645},{svgPath:p,color:"info",title:"Bern",country:"Switzerland",latitude:46.948,longitude:7.4481},{svgPath:p,color:"info",title:"Kiev",country:"Ukraine",latitude:50.4422,longitude:30.5367},{svgPath:p,color:"info",title:"Paris",country:"France",latitude:48.8567,longitude:2.351},{svgPath:p,color:"info",title:"New York",country:"United States of America",latitude:40.43,longitude:-74}],X={cities:rt,mainCity:ie.title,homeCity:ie.title},ut=o=>{const{getColor:e}=he();return Ye(()=>o.value.map(t=>({...t,color:e(t.color)})))},ct=o=>{if(!o||!o.flights||!o.flights.length)return;const e=[...o.flights.map(({latitude:i})=>i),o.latitude],t=[...o.flights.map(({longitude:i})=>i),o.longitude];return{bottom:Math.min(...e),left:Math.min(...t),right:Math.max(...t),top:Math.max(...e)}},dt=o=>{if(!(!o||!o.flights||!o.flights.length))return o.flights.map(e=>({geometry:{type:"LineString",coordinates:[[o.longitude,o.latitude],[e.longitude,e.latitude]]}}))},q=(o,e)=>o.toLowerCase()===e.toLowerCase(),gt=me({__name:"LineMap",props:{mapData:null,homeCity:{default:"New York"},modelValue:{default:"New York"}},emits:["update:modelValue"],setup(o,{emit:e}){const t=o,i=a=>a?`Flights from ${a}`:"",l=a=>`Show flights from ${a}`,{colors:n}=he(),u=O(),s=D(),r=D(),h=D(),m=D(),v=D(),_=D(),f=D(),y=D(),L=D(),d=ce({get(){return t.modelValue},set(a){e("update:modelValue",a)}}),c=ut(Ze(t,"mapData")),g=ce(()=>{const a=P();return dt(a)}),P=()=>c.value.find(({title:a})=>q(a,d.value)),w=()=>{const a=P(),b=ct(a);b&&r.value.zoomToGeoBounds(b)},k=()=>{var ae;const a=je.new(u.value);a.setThemes([Ne.new(a)]);const b=a.container.children.push(Ve.new(a,{minZoomLevel:1,maxZoomLevel:10})),j=b.set("zoomControl",ze.new(a,{})),F=b.series.push(Oe.new(a,{geoJSON:Re,exclude:["AQ"]}));F.mapPolygons.template.setAll({fill:C(n.secondary),fillOpacity:.4,strokeWidth:.5}),F.events.on("datavalidated",w);const Y=b.series.push(Ge.new(a,{latitudeField:"latitude",longitudeField:"longitude"})),ne=pe.new({});ne.events.on("click",N=>{d.value=N.target._dataItem.dataContext.title}),Y.bullets.push((N,mt,we)=>{const H=we.dataContext,le=q(H.title,d.value);return Ie.new(N,{sprite:I.new(N,{svgPath:H.svgPath,x:z(50),y:z(50),centerX:z(50),centerY:z(50),fill:C(le?n.primary:H.color),scale:le?1.5:1,tooltipText:"{title}"},ne)})});const Z=b.series.push(U.new(a,{}));Z.mapLines.template.setAll({stroke:C(n.primary),strokeWidth:2,strokeOpacity:.5}),Y.data.setAll(c.value),Z.data.setAll(g.value);const oe=b.children.push(Ee.new(a,{x:15,y:15,layout:a.horizontalLayout})),Ce=oe.children.push(I.new(a,{svgPath:lt,fill:C(n.info)})),De=oe.children.push(ue.new(a,{text:i((ae=P())==null?void 0:ae.title),fill:C(n.info),fontSize:22,lineHeight:Ue})),$=b.children.push(Fe.new(a,{x:15,y:45,label:ue.new(a,{text:l(t.homeCity),paddingTop:0,marginRight:0,paddingBottom:0,marginLeft:0}),visible:!1}));$.events.on("click",()=>{d.value=t.homeCity,$.hide()}),s.value=a,r.value=b,_.value=j,m.value=Y,v.value=Z,h.value=F,y.value=Ce,f.value=De,L.value=$},A=()=>{m.value.data.setAll(c.value)},_e=()=>{v.value.data.setAll(g.value??[])},Le=()=>{var a,b,j;f.value.set("text",i((a=P())==null?void 0:a.title)),(j=(b=L.value)[q(t.homeCity,d.value)?"hide":"show"])==null||j.call(b)},Pe=()=>{s.value&&(h.value.mapPolygons.template.setAll({fill:C(n.secondary)}),v.value.mapLines.template.setAll({stroke:C(n.primary)}),f.value.set("fill",C(n.info)),y.value.set("fill",C(n.info)),A())},be=()=>{s.value&&(A(),_e(),Le(),w())},Se=()=>{s.value&&s.value.dispose()};return $e(k),He(be),Ke(n,Pe),Xe(Se),(a,b)=>(fe(),ye("div",{ref_key:"mapRef",ref:u,class:"line-map"},null,512))}});const pt=qe(gt,[["__scopeId","data-v-83bde57d"]]),ht={class:"line-maps-page"},_t=me({__name:"LineMapsPage",setup(o){const e=O(X.mainCity),t=O(X.homeCity),i=O(X.cities);return(l,n)=>{const u=Je("va-card");return fe(),ye("div",ht,[de(u,{class:"line-maps-page__widget",title:"Line Maps"},{default:We(()=>[de(pt,{modelValue:e.value,"onUpdate:modelValue":n[0]||(n[0]=s=>e.value=s),"map-data":i.value,"home-city":t.value,style:{height:"75vh"}},null,8,["modelValue","map-data","home-city"])]),_:1})])}}});export{_t as default};
